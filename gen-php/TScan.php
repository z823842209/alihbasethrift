<?php
/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * Any timestamps in the columns are ignored but the colFamTimeRangeMap included, use timeRange to select by timestamp.
 * Max versions defaults to 1.
 */
class TScan
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'startRow',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'stopRow',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'columns',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\TColumn',
                ),
        ),
        4 => array(
            'var' => 'caching',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        5 => array(
            'var' => 'maxVersions',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        6 => array(
            'var' => 'timeRange',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\TTimeRange',
        ),
        7 => array(
            'var' => 'filterString',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        8 => array(
            'var' => 'batchSize',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        9 => array(
            'var' => 'attributes',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
        10 => array(
            'var' => 'authorizations',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\TAuthorization',
        ),
        11 => array(
            'var' => 'reversed',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        12 => array(
            'var' => 'cacheBlocks',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        13 => array(
            'var' => 'colFamTimeRangeMap',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRUCT,
                'class' => '\TTimeRange',
                ),
        ),
        14 => array(
            'var' => 'readType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        15 => array(
            'var' => 'limit',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        16 => array(
            'var' => 'consistency',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        17 => array(
            'var' => 'targetReplicaId',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        18 => array(
            'var' => 'filterBytes',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $startRow = null;
    /**
     * @var string
     */
    public $stopRow = null;
    /**
     * @var \TColumn[]
     */
    public $columns = null;
    /**
     * @var int
     */
    public $caching = null;
    /**
     * @var int
     */
    public $maxVersions = 1;
    /**
     * @var \TTimeRange
     */
    public $timeRange = null;
    /**
     * @var string
     */
    public $filterString = null;
    /**
     * @var int
     */
    public $batchSize = null;
    /**
     * @var array
     */
    public $attributes = null;
    /**
     * @var \TAuthorization
     */
    public $authorizations = null;
    /**
     * @var bool
     */
    public $reversed = null;
    /**
     * @var bool
     */
    public $cacheBlocks = null;
    /**
     * @var array
     */
    public $colFamTimeRangeMap = null;
    /**
     * @var int
     */
    public $readType = null;
    /**
     * @var int
     */
    public $limit = null;
    /**
     * @var int
     */
    public $consistency = null;
    /**
     * @var int
     */
    public $targetReplicaId = null;
    /**
     * @var string
     */
    public $filterBytes = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['startRow'])) {
                $this->startRow = $vals['startRow'];
            }
            if (isset($vals['stopRow'])) {
                $this->stopRow = $vals['stopRow'];
            }
            if (isset($vals['columns'])) {
                $this->columns = $vals['columns'];
            }
            if (isset($vals['caching'])) {
                $this->caching = $vals['caching'];
            }
            if (isset($vals['maxVersions'])) {
                $this->maxVersions = $vals['maxVersions'];
            }
            if (isset($vals['timeRange'])) {
                $this->timeRange = $vals['timeRange'];
            }
            if (isset($vals['filterString'])) {
                $this->filterString = $vals['filterString'];
            }
            if (isset($vals['batchSize'])) {
                $this->batchSize = $vals['batchSize'];
            }
            if (isset($vals['attributes'])) {
                $this->attributes = $vals['attributes'];
            }
            if (isset($vals['authorizations'])) {
                $this->authorizations = $vals['authorizations'];
            }
            if (isset($vals['reversed'])) {
                $this->reversed = $vals['reversed'];
            }
            if (isset($vals['cacheBlocks'])) {
                $this->cacheBlocks = $vals['cacheBlocks'];
            }
            if (isset($vals['colFamTimeRangeMap'])) {
                $this->colFamTimeRangeMap = $vals['colFamTimeRangeMap'];
            }
            if (isset($vals['readType'])) {
                $this->readType = $vals['readType'];
            }
            if (isset($vals['limit'])) {
                $this->limit = $vals['limit'];
            }
            if (isset($vals['consistency'])) {
                $this->consistency = $vals['consistency'];
            }
            if (isset($vals['targetReplicaId'])) {
                $this->targetReplicaId = $vals['targetReplicaId'];
            }
            if (isset($vals['filterBytes'])) {
                $this->filterBytes = $vals['filterBytes'];
            }
        }
    }

    public function getName()
    {
        return 'TScan';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->startRow);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->stopRow);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->columns = array();
                        $_size94 = 0;
                        $_etype97 = 0;
                        $xfer += $input->readListBegin($_etype97, $_size94);
                        for ($_i98 = 0; $_i98 < $_size94; ++$_i98) {
                            $elem99 = null;
                            $elem99 = new \TColumn();
                            $xfer += $elem99->read($input);
                            $this->columns []= $elem99;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->caching);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->maxVersions);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRUCT) {
                        $this->timeRange = new \TTimeRange();
                        $xfer += $this->timeRange->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->filterString);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->batchSize);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::MAP) {
                        $this->attributes = array();
                        $_size100 = 0;
                        $_ktype101 = 0;
                        $_vtype102 = 0;
                        $xfer += $input->readMapBegin($_ktype101, $_vtype102, $_size100);
                        for ($_i104 = 0; $_i104 < $_size100; ++$_i104) {
                            $key105 = '';
                            $val106 = '';
                            $xfer += $input->readString($key105);
                            $xfer += $input->readString($val106);
                            $this->attributes[$key105] = $val106;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRUCT) {
                        $this->authorizations = new \TAuthorization();
                        $xfer += $this->authorizations->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->reversed);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->cacheBlocks);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::MAP) {
                        $this->colFamTimeRangeMap = array();
                        $_size107 = 0;
                        $_ktype108 = 0;
                        $_vtype109 = 0;
                        $xfer += $input->readMapBegin($_ktype108, $_vtype109, $_size107);
                        for ($_i111 = 0; $_i111 < $_size107; ++$_i111) {
                            $key112 = '';
                            $val113 = new \TTimeRange();
                            $xfer += $input->readString($key112);
                            $val113 = new \TTimeRange();
                            $xfer += $val113->read($input);
                            $this->colFamTimeRangeMap[$key112] = $val113;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->readType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->limit);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->consistency);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 17:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->targetReplicaId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 18:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->filterBytes);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('TScan');
        if ($this->startRow !== null) {
            $xfer += $output->writeFieldBegin('startRow', TType::STRING, 1);
            $xfer += $output->writeString($this->startRow);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->stopRow !== null) {
            $xfer += $output->writeFieldBegin('stopRow', TType::STRING, 2);
            $xfer += $output->writeString($this->stopRow);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->columns !== null) {
            if (!is_array($this->columns)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('columns', TType::LST, 3);
            $output->writeListBegin(TType::STRUCT, count($this->columns));
            foreach ($this->columns as $iter114) {
                $xfer += $iter114->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->caching !== null) {
            $xfer += $output->writeFieldBegin('caching', TType::I32, 4);
            $xfer += $output->writeI32($this->caching);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->maxVersions !== null) {
            $xfer += $output->writeFieldBegin('maxVersions', TType::I32, 5);
            $xfer += $output->writeI32($this->maxVersions);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->timeRange !== null) {
            if (!is_object($this->timeRange)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('timeRange', TType::STRUCT, 6);
            $xfer += $this->timeRange->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->filterString !== null) {
            $xfer += $output->writeFieldBegin('filterString', TType::STRING, 7);
            $xfer += $output->writeString($this->filterString);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->batchSize !== null) {
            $xfer += $output->writeFieldBegin('batchSize', TType::I32, 8);
            $xfer += $output->writeI32($this->batchSize);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->attributes !== null) {
            if (!is_array($this->attributes)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('attributes', TType::MAP, 9);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->attributes));
            foreach ($this->attributes as $kiter115 => $viter116) {
                $xfer += $output->writeString($kiter115);
                $xfer += $output->writeString($viter116);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->authorizations !== null) {
            if (!is_object($this->authorizations)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('authorizations', TType::STRUCT, 10);
            $xfer += $this->authorizations->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->reversed !== null) {
            $xfer += $output->writeFieldBegin('reversed', TType::BOOL, 11);
            $xfer += $output->writeBool($this->reversed);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cacheBlocks !== null) {
            $xfer += $output->writeFieldBegin('cacheBlocks', TType::BOOL, 12);
            $xfer += $output->writeBool($this->cacheBlocks);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->colFamTimeRangeMap !== null) {
            if (!is_array($this->colFamTimeRangeMap)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('colFamTimeRangeMap', TType::MAP, 13);
            $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->colFamTimeRangeMap));
            foreach ($this->colFamTimeRangeMap as $kiter117 => $viter118) {
                $xfer += $output->writeString($kiter117);
                $xfer += $viter118->write($output);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->readType !== null) {
            $xfer += $output->writeFieldBegin('readType', TType::I32, 14);
            $xfer += $output->writeI32($this->readType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->limit !== null) {
            $xfer += $output->writeFieldBegin('limit', TType::I32, 15);
            $xfer += $output->writeI32($this->limit);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->consistency !== null) {
            $xfer += $output->writeFieldBegin('consistency', TType::I32, 16);
            $xfer += $output->writeI32($this->consistency);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->targetReplicaId !== null) {
            $xfer += $output->writeFieldBegin('targetReplicaId', TType::I32, 17);
            $xfer += $output->writeI32($this->targetReplicaId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->filterBytes !== null) {
            $xfer += $output->writeFieldBegin('filterBytes', TType::STRING, 18);
            $xfer += $output->writeString($this->filterBytes);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
