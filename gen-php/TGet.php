<?php
/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * Used to perform Get operations on a single row.
 * 
 * The scope can be further narrowed down by specifying a list of
 * columns or column families.
 * 
 * To get everything for a row, instantiate a Get object with just the row to get.
 * To further define the scope of what to get you can add a timestamp or time range
 * with an optional maximum number of versions to return.
 * 
 * If you specify a time range and a timestamp the range is ignored.
 * Timestamps on TColumns are ignored.
 */
class TGet
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'row',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'columns',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\TColumn',
                ),
        ),
        3 => array(
            'var' => 'timestamp',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        4 => array(
            'var' => 'timeRange',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\TTimeRange',
        ),
        5 => array(
            'var' => 'maxVersions',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        6 => array(
            'var' => 'filterString',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'attributes',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
        8 => array(
            'var' => 'authorizations',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\TAuthorization',
        ),
        9 => array(
            'var' => 'consistency',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        10 => array(
            'var' => 'targetReplicaId',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        11 => array(
            'var' => 'cacheBlocks',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        12 => array(
            'var' => 'storeLimit',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        13 => array(
            'var' => 'storeOffset',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        14 => array(
            'var' => 'existence_only',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        15 => array(
            'var' => 'filterBytes',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $row = null;
    /**
     * @var \TColumn[]
     */
    public $columns = null;
    /**
     * @var int
     */
    public $timestamp = null;
    /**
     * @var \TTimeRange
     */
    public $timeRange = null;
    /**
     * @var int
     */
    public $maxVersions = null;
    /**
     * @var string
     */
    public $filterString = null;
    /**
     * @var array
     */
    public $attributes = null;
    /**
     * @var \TAuthorization
     */
    public $authorizations = null;
    /**
     * @var int
     */
    public $consistency = null;
    /**
     * @var int
     */
    public $targetReplicaId = null;
    /**
     * @var bool
     */
    public $cacheBlocks = null;
    /**
     * @var int
     */
    public $storeLimit = null;
    /**
     * @var int
     */
    public $storeOffset = null;
    /**
     * @var bool
     */
    public $existence_only = null;
    /**
     * @var string
     */
    public $filterBytes = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['row'])) {
                $this->row = $vals['row'];
            }
            if (isset($vals['columns'])) {
                $this->columns = $vals['columns'];
            }
            if (isset($vals['timestamp'])) {
                $this->timestamp = $vals['timestamp'];
            }
            if (isset($vals['timeRange'])) {
                $this->timeRange = $vals['timeRange'];
            }
            if (isset($vals['maxVersions'])) {
                $this->maxVersions = $vals['maxVersions'];
            }
            if (isset($vals['filterString'])) {
                $this->filterString = $vals['filterString'];
            }
            if (isset($vals['attributes'])) {
                $this->attributes = $vals['attributes'];
            }
            if (isset($vals['authorizations'])) {
                $this->authorizations = $vals['authorizations'];
            }
            if (isset($vals['consistency'])) {
                $this->consistency = $vals['consistency'];
            }
            if (isset($vals['targetReplicaId'])) {
                $this->targetReplicaId = $vals['targetReplicaId'];
            }
            if (isset($vals['cacheBlocks'])) {
                $this->cacheBlocks = $vals['cacheBlocks'];
            }
            if (isset($vals['storeLimit'])) {
                $this->storeLimit = $vals['storeLimit'];
            }
            if (isset($vals['storeOffset'])) {
                $this->storeOffset = $vals['storeOffset'];
            }
            if (isset($vals['existence_only'])) {
                $this->existence_only = $vals['existence_only'];
            }
            if (isset($vals['filterBytes'])) {
                $this->filterBytes = $vals['filterBytes'];
            }
        }
    }

    public function getName()
    {
        return 'TGet';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->row);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::LST) {
                        $this->columns = array();
                        $_size14 = 0;
                        $_etype17 = 0;
                        $xfer += $input->readListBegin($_etype17, $_size14);
                        for ($_i18 = 0; $_i18 < $_size14; ++$_i18) {
                            $elem19 = null;
                            $elem19 = new \TColumn();
                            $xfer += $elem19->read($input);
                            $this->columns []= $elem19;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->timestamp);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRUCT) {
                        $this->timeRange = new \TTimeRange();
                        $xfer += $this->timeRange->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->maxVersions);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->filterString);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::MAP) {
                        $this->attributes = array();
                        $_size20 = 0;
                        $_ktype21 = 0;
                        $_vtype22 = 0;
                        $xfer += $input->readMapBegin($_ktype21, $_vtype22, $_size20);
                        for ($_i24 = 0; $_i24 < $_size20; ++$_i24) {
                            $key25 = '';
                            $val26 = '';
                            $xfer += $input->readString($key25);
                            $xfer += $input->readString($val26);
                            $this->attributes[$key25] = $val26;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRUCT) {
                        $this->authorizations = new \TAuthorization();
                        $xfer += $this->authorizations->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->consistency);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->targetReplicaId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->cacheBlocks);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->storeLimit);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->storeOffset);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->existence_only);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->filterBytes);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('TGet');
        if ($this->row !== null) {
            $xfer += $output->writeFieldBegin('row', TType::STRING, 1);
            $xfer += $output->writeString($this->row);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->columns !== null) {
            if (!is_array($this->columns)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('columns', TType::LST, 2);
            $output->writeListBegin(TType::STRUCT, count($this->columns));
            foreach ($this->columns as $iter27) {
                $xfer += $iter27->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->timestamp !== null) {
            $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
            $xfer += $output->writeI64($this->timestamp);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->timeRange !== null) {
            if (!is_object($this->timeRange)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('timeRange', TType::STRUCT, 4);
            $xfer += $this->timeRange->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->maxVersions !== null) {
            $xfer += $output->writeFieldBegin('maxVersions', TType::I32, 5);
            $xfer += $output->writeI32($this->maxVersions);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->filterString !== null) {
            $xfer += $output->writeFieldBegin('filterString', TType::STRING, 6);
            $xfer += $output->writeString($this->filterString);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->attributes !== null) {
            if (!is_array($this->attributes)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('attributes', TType::MAP, 7);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->attributes));
            foreach ($this->attributes as $kiter28 => $viter29) {
                $xfer += $output->writeString($kiter28);
                $xfer += $output->writeString($viter29);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->authorizations !== null) {
            if (!is_object($this->authorizations)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('authorizations', TType::STRUCT, 8);
            $xfer += $this->authorizations->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->consistency !== null) {
            $xfer += $output->writeFieldBegin('consistency', TType::I32, 9);
            $xfer += $output->writeI32($this->consistency);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->targetReplicaId !== null) {
            $xfer += $output->writeFieldBegin('targetReplicaId', TType::I32, 10);
            $xfer += $output->writeI32($this->targetReplicaId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cacheBlocks !== null) {
            $xfer += $output->writeFieldBegin('cacheBlocks', TType::BOOL, 11);
            $xfer += $output->writeBool($this->cacheBlocks);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->storeLimit !== null) {
            $xfer += $output->writeFieldBegin('storeLimit', TType::I32, 12);
            $xfer += $output->writeI32($this->storeLimit);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->storeOffset !== null) {
            $xfer += $output->writeFieldBegin('storeOffset', TType::I32, 13);
            $xfer += $output->writeI32($this->storeOffset);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->existence_only !== null) {
            $xfer += $output->writeFieldBegin('existence_only', TType::BOOL, 14);
            $xfer += $output->writeBool($this->existence_only);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->filterBytes !== null) {
            $xfer += $output->writeFieldBegin('filterBytes', TType::STRING, 15);
            $xfer += $output->writeString($this->filterBytes);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
